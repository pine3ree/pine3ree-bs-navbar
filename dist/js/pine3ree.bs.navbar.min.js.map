{"version":3,"sources":["pine3ree.bs.navbar.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","window","bootstrap","$","P3_DATA_KEY","P3_EVENT_KEY","concat","P3_NAME","bubbles","cancelable","P3_EVENT_HIDDEN","P3_EVENT_CLICK","P3_EVENT_HIDE","P3_EVENT_SHOWN","P3_DATA_TIMEOUT_ID","BS_NAME","BS_DATA_KEY","ENTER_KEY","ESCAPE_KEY","ARROW_DOWN_KEY","BS_EVENT_KEY","RIGHT_MOUSE_BUTTON","BS_EVENT_SHOW","BS_EVENT_HIDE","BS_EVENT_CLICK_DATA_API","BS_DATA_API_KEY","BS_EVENT_KEYUP_DATA_API","BS_CLASS_SHOW","BS_CLASS_DROPSTART","BS_CLASS_DROPUP_CENTER","BS_SELECTOR_DATA_TOGGLE","BS_CLASS_DROPDOWN_CENTER","BS_SELECTOR_DATA_TOGGLE_SHOWN","BS_SELECTOR_DROPDOWN","BS_SELECTOR_DROPDOWN_SHOWN","BS_CLASS_MENU","BS_SELECTOR_MENU","BS_SELECTOR_MENU_SHOWN","BS_SELECTOR_NAVBAR","BS_CLASS_MENU_END","BS_CLASS_DROPDOWN_ITEM","BS_SELECTOR_MENU_END","BS_SELECTOR_VISIBLE_ITEMS","P3_SELECTOR_VISIBLE_ITEMS","isTouchDevice","BsDropdown","Dropdown","getClientWidth","innerWidth","document","documentElement","clientWidth","getSiblings","element","selector","toggle","HTMLElement","siblings","getAttribute","disabled","classList","contains","handleShownEvent","breakpoint","closeOthers","stopPropagation","child","undefined","arguments","target","relatedTarget","isEnabledToggle","dropdown","closest","add","querySelectorAll","menu","forEach","remove","BS_CLASS_DROPEND","left","getBoundingClientRect","right","offsetWidth","isDropStart","menuEndRegex","className","menuItem","submenu","querySelector","containers","container","style","visibility","push","isRTL","hide","event","Event","subwidth","closeSiblingDropdowns","toggleElement","setChildrenDropDirection","otherNavs","BS_SELECTOR_NAVBAR_NAV","currentNav","parentElement","otherNav","closeInnerDropdowns","dispatchEvent","P3_EVENT_OPTS","dispatchCustomEvent","NodeList","c","getOrCreateInstance","handleClickDataApiEvent","parent","sibling","timeoutID","clearTimeout","handleKeydown","navbar","key","ARROW_UP_KEY","includes","matches","shouldGetNext","cycle","index","list","indexOf","listLength","Math","max","min","nextItem","focus","KeyboardEvent","P3_EVENT_KEYDOWN","activateHover","timeout","handleBreakpointCrossing","handleMouseEnter","addEventListener","setAttribute","setTimeout","handleMouseLeave","p3bsNavbar","options","OPTIONS","assign","defaults","navbars","isValidKeyEvent","OPT","_iterator","nc","_step","rootStyle","getComputedStyle","parseInt","getPropertyValue","Number","isInteger","getExpandBreakpoint","P3_EVENT_SHOW","subItem","BS_EVENT_SHOWN","isNavKeyEvent","handleHiddenEvent","customEvents","closeOtherNavs","hover","MouseEvent","previousWidth","currentWidth","closeExternalDropdowns","dropdowns","pine3ree","bs","fn","opts","extend","this","get","jQuery"],"mappings":"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","file":"pine3ree.bs.navbar.min.js","sourcesContent":["/* jslint browser:true */\n/* global document, window */\n\n'use strict';\n\n// Check bootstrap library\nif (!window.bootstrap || !window.bootstrap.Dropdown) {\n    throw new Error('bootstrap.Dropdown library was not found');\n}\n\n(function(bootstrap, $) {\n\n    const P3_NAME = 'p3bsNavbar';\n\n    const P3_DATA_KEY = 'p3.navbar.dropdown';\n    const P3_EVENT_KEY = `.${P3_DATA_KEY}`;\n    const P3_EVENT_OPTS = { bubbles: true, cancelable: true };\n    const P3_EVENT_CLICK = `click${P3_EVENT_KEY}`;\n    const P3_EVENT_HIDE = `hide${P3_EVENT_KEY}`;\n    const P3_EVENT_HIDDEN = `hidden${P3_EVENT_KEY}`;\n    const P3_EVENT_SHOW = `show${P3_EVENT_KEY}`;\n    const P3_EVENT_SHOWN = `shown${P3_EVENT_KEY}`;\n    const P3_EVENT_KEYDOWN = `keydown${P3_EVENT_KEY}`;\n    const P3_EVENT_KEYUP = `keyup${P3_EVENT_KEY}`;\n    const P3_DATA_TIMEOUT_ID = `timeoutID.${P3_DATA_KEY}`;\n\n    const BS_NAME = 'dropdown';\n    const BS_DATA_KEY = 'bs.dropdown';\n    const BS_EVENT_KEY = `.${BS_DATA_KEY}`;\n    const BS_DATA_API_KEY = '.data-api';\n\n    const ENTER_KEY = 'Enter';\n    const ESCAPE_KEY = 'Escape';\n    const TAB_KEY = 'Tab';\n    const ARROW_UP_KEY = 'ArrowUp';\n    const ARROW_DOWN_KEY = 'ArrowDown';\n    const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button\n\n    const BS_EVENT_HIDE = `hide${BS_EVENT_KEY}`;\n    const BS_EVENT_HIDDEN = `hidden${BS_EVENT_KEY}`;\n    const BS_EVENT_SHOW = `show${BS_EVENT_KEY}`;\n    const BS_EVENT_SHOWN = `shown${BS_EVENT_KEY}`;\n    const BS_EVENT_CLICK_DATA_API = `click${BS_EVENT_KEY}${BS_DATA_API_KEY}`;\n    const BS_EVENT_KEYDOWN_DATA_API = `keydown${BS_EVENT_KEY}${BS_DATA_API_KEY}`;\n    const BS_EVENT_KEYUP_DATA_API = `keyup${BS_EVENT_KEY}${BS_DATA_API_KEY}`;\n\n    const BS_CLASS_SHOW = 'show';\n    const BS_CLASS_DROPUP = 'dropup';\n    const BS_CLASS_DROPEND = 'dropend';\n    const BS_CLASS_DROPSTART = 'dropstart';\n    const BS_CLASS_DROPUP_CENTER = 'dropup-center';\n    const BS_CLASS_DROPDOWN_CENTER = 'dropdown-center';\n\n    const BS_SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"dropdown\"]:not(.disabled):not(:disabled)';\n    const BS_SELECTOR_DATA_TOGGLE_SHOWN = `${BS_SELECTOR_DATA_TOGGLE}.${BS_CLASS_SHOW}`;\n    const BS_SELECTOR_DROPDOWN = '.dropdown';\n    const BS_SELECTOR_DROPDOWN_SHOWN = `${BS_SELECTOR_DROPDOWN}.${BS_CLASS_SHOW}`;\n    const BS_CLASS_DROPDOWN_ITEM = 'dropdown-item';\n    const BS_CLASS_MENU = 'dropdown-menu';\n    const BS_SELECTOR_MENU = `.${BS_CLASS_MENU}`;\n    const BS_SELECTOR_MENU_SHOWN = `${BS_SELECTOR_MENU}.${BS_CLASS_SHOW}`;\n    const BS_CLASS_NAVBAR = 'navbar';\n    const BS_SELECTOR_NAVBAR = `.${BS_CLASS_NAVBAR}`;\n    const BS_CLASS_MENU_END = `${BS_CLASS_MENU}-end`;\n    const BS_SELECTOR_MENU_END = `${BS_SELECTOR_MENU}.${BS_CLASS_MENU_END}`;\n    const BS_SELECTOR_NAVBAR_NAV = '.navbar-nav';\n    const BS_SELECTOR_VISIBLE_ITEMS = `.dropdown-menu .${BS_CLASS_DROPDOWN_ITEM}:not(.disabled):not(:disabled)`;\n    const P3_SELECTOR_VISIBLE_ITEMS = `.${BS_CLASS_DROPDOWN_ITEM}:not(.disabled):not(:disabled)`;\n\n    // dropdown-menu-(sm|md|lg)-end\n    const menuEndRegex = new RegExp(`${BS_CLASS_MENU}(?:-[a-z]{2,3})?-end`);\n\n    const isRTL = document.documentElement.dir === 'rtl';\n    const isTouchDevice = 'ontouchstart' in window;\n\n    const BsDropdown = bootstrap.Dropdown;\n\n\n    /**\n     * Get the html document width\n     *\n     * @return {Number}\n     */\n    function getClientWidth() {\n        return Math.max(window.innerWidth, document.documentElement.clientWidth);\n    }\n\n    /**\n     * Get an Array of siblings of an HTMLElement\n     *\n     * @param {HTMLElement} element\n     * @param {string} selector\n     * @return {Array}\n     */\n    function getSiblings(element, selector = '*') {\n\n        const siblings = [];\n\n        if (element instanceof HTMLElement) {\n            const parent = element.parentElement;\n            if (parent instanceof HTMLElement) {\n                parent.querySelectorAll(`:scope > ${selector}`).forEach(function(child) {\n                    if (child !== element && child instanceof HTMLElement) {\n                        siblings.push(child);\n                    }\n                });\n            }\n        }\n\n        return siblings;\n    }\n\n    /**\n     * Check if element is an enabled dropdown toggler\n     *\n     * @param {HTMLElement} toggle\n     * @return {Boolean}\n     */\n    function isEnabledToggle(toggle) {\n\n        if (toggle && toggle instanceof HTMLElement) {\n            return (\n                toggle.getAttribute('data-bs-toggle') === 'dropdown'\n                && !toggle.disabled\n                && !toggle.classList.contains('disabled')\n            );\n        }\n\n        return false;\n    }\n\n    /**\n     * Helper function for BS_EVENT_SHOWN event handlers\n     *\n     * @param {Event} e\n     * @param {Number} breakpoint\n     * @param {Boolean} closeOthers\n     * @param {Boolean} stopPropagation\n     * @return {undefined}\n     */\n    function handleShownEvent(e, breakpoint, closeOthers, stopPropagation = false) {\n\n        const target = e.relatedTarget || e.target;\n\n        if (!isEnabledToggle(target)) {\n            return;\n        }\n\n        // If toggler is matched prevent bubbling up?\n        if (stopPropagation) {\n            e.stopPropagation();\n        }\n\n        const dropdown = target.closest(BS_SELECTOR_DROPDOWN);\n\n        if (dropdown instanceof HTMLElement) {\n            const clientWidth = getClientWidth();\n\n            dropdown.classList.add(BS_CLASS_SHOW);\n\n            setChildrenDropDirection(dropdown, clientWidth, breakpoint);\n\n            if (closeOthers || clientWidth >= breakpoint) {\n                closeOtherNavs(dropdown);\n                closeSiblingDropdowns(dropdown);\n            }\n        }\n\n        // MUST dispatch custom event (used to close external dropdowns)\n        target.dispatchEvent(new Event(P3_EVENT_SHOWN, P3_EVENT_OPTS));\n    }\n\n    /**\n     * Helper function for BS_EVENT_HIDDEN event handlers\n     *\n     * @param {Event} e\n     * @param {Boolean} stopPropagation\n     * @param {Boolean} dispatchCustomEvent Dispatch a custom event?\n     * @return {undefined}\n     */\n    function handleHiddenEvent(e, stopPropagation = false, dispatchCustomEvent = false) {\n\n        const target = e.relatedTarget || e.target;\n\n        if (!isEnabledToggle(target)) {\n            return;\n        }\n\n        // If it is a toggler prevent bubbling?\n        if (stopPropagation) {\n            e.stopPropagation();\n        }\n\n        const dropdown = target.parentElement.closest(BS_SELECTOR_DROPDOWN);\n        if (dropdown instanceof HTMLElement) {\n            dropdown.classList.remove(BS_CLASS_SHOW);\n            closeInnerDropdowns(dropdown);\n        }\n\n        // Dispatch custom event?\n        if (dispatchCustomEvent) {\n            target.dispatchEvent(new Event(P3_EVENT_HIDDEN, P3_EVENT_OPTS));\n        }\n    }\n\n    /**\n     *  Helper function for BS_EVENT_CLICK_DATA_API event handlers\n     *\n     * @param {Event} e\n     * @param {Boolean} hover\n     * @param {Number} timeout\n     * @param {Boolean} dispatchCustomEvent Dispatch a custom event?\n     * @return {undefined}\n     */\n    function handleClickDataApiEvent(e, hover, timeout, dispatchCustomEvent = false) {\n\n        const target = e.relatedTarget || e.target;\n\n        if (!isEnabledToggle(target)) {\n            return;\n        }\n\n        // If it is a toggler we MUST stop bubbling to prevent parent menu from\n        // being close by bootstrap handler\n        e.stopPropagation();\n\n        // Remove any running timer\n        if (hover && timeout > 0) {\n            const timeoutID = target.getAttribute(`data-${P3_DATA_TIMEOUT_ID}`);\n            if (timeoutID > 0) {\n                clearTimeout(timeoutID);\n            }\n        }\n\n        // Dispatch custom event?\n        if (dispatchCustomEvent) {\n            target.dispatchEvent(new MouseEvent(P3_EVENT_CLICK, e));\n        }\n    }\n\n    /**\n     * Close any dropdown not contained in this navbar\n     *\n     * @param {HTMLElement} navbar\n     * @return {undefined}\n     */\n    function closeExternalDropdowns(navbar) {\n\n        if (!(navbar instanceof HTMLElement)) {\n            return;\n        }\n\n        document.querySelectorAll(BS_SELECTOR_DATA_TOGGLE_SHOWN).forEach(function(toggleElement) {\n            if (!navbar.contains(toggleElement)) {\n                const toggle = BsDropdown.getOrCreateInstance(toggleElement);\n                if (toggle instanceof BsDropdown) {\n                    toggle.hide();\n                }\n            }\n        });\n    }\n\n    /**\n     * Hides all dropdowns inside the given container\n     *\n     * @param {HTMLElement|Array|NodeList} container\n     * @param {Event} event\n     * @param {boolean} [stopPropagation=true]\n     * @return {undefined}\n     */\n    function closeInnerDropdowns(container, event, stopPropagation = false) {\n\n        const containers = [];\n\n        if (container instanceof Array || container instanceof NodeList) {\n            container.forEach(function(c) {\n                if (c instanceof HTMLElement) {\n                    containers.push(c);\n                }\n            });\n        } else if (container instanceof HTMLElement) {\n            containers.push(container);\n        }\n\n        if (containers.length > 0) {\n            containers.forEach(function(container) {\n                container.querySelectorAll(BS_SELECTOR_DATA_TOGGLE_SHOWN).forEach(function(toggleElement) {\n                    const toggle = BsDropdown.getOrCreateInstance(toggleElement);\n                    if (toggle instanceof BsDropdown) {\n                        toggle.hide();\n                    }\n                });\n            });\n        }\n\n        if (event instanceof Event && stopPropagation === true) {\n            event.stopPropagation();\n        }\n    }\n\n    /**\n     * Close siblings nav menu-items\n     *\n     * @param {HTMLElement} dropdown\n     * @param {Event} event\n     * @param {Boolean} stopPropagation\n     * @return {undefined}\n     */\n    function closeSiblingDropdowns(dropdown, event, stopPropagation = false) {\n\n        getSiblings(dropdown, BS_SELECTOR_DROPDOWN).forEach(function(sibling) {\n            const toggleElement = sibling.querySelector(BS_SELECTOR_DATA_TOGGLE_SHOWN);\n            if (toggleElement) {\n                const toggle = BsDropdown.getOrCreateInstance(toggleElement);\n                if (toggle instanceof BsDropdown) {\n                    toggle.hide();\n                }\n            }\n        });\n    }\n\n    /**\n     * Close other navbar-nav in the same navbar\n     *\n     * @param {HTMLElement} dropdown\n     * @param {Event} event\n     * @param {Boolean} stopPropagation\n     * @return {undefined}\n     */\n    function closeOtherNavs(dropdown, event, stopPropagation = false) {\n\n        const otherNavs = document.querySelectorAll(`${BS_SELECTOR_NAVBAR} ${BS_SELECTOR_NAVBAR_NAV}`);\n        const currentNav = dropdown.parentElement.closest(BS_SELECTOR_NAVBAR_NAV);\n\n        otherNavs.forEach(function(otherNav) {\n            if (otherNav !== currentNav) {\n                closeInnerDropdowns(otherNav, event, stopPropagation);\n            }\n        });\n    }\n\n    /**\n     * Set the direction of a dropdown's children/submenu\n     *\n     * @param {HTMLElement} dropdown\n     * @param {Number} clientWidth\n     * @param {Number} breakpoint\n     * @return {undefined}\n     */\n    function setChildrenDropDirection(dropdown, clientWidth, breakpoint) {\n\n        const menu = dropdown.querySelector(`:scope > ${BS_SELECTOR_MENU}`);\n\n        if (!(menu instanceof HTMLElement)) {\n            return;\n        }\n\n        if (clientWidth < breakpoint) {\n            menu.querySelectorAll(BS_SELECTOR_DROPDOWN).forEach(function(child) {\n                child.classList.remove(BS_CLASS_DROPEND);\n                child.classList.remove(BS_CLASS_DROPSTART);\n            });\n            return;\n        }\n\n        const left = menu.getBoundingClientRect().left;\n        const right = left + menu.offsetWidth;\n\n        const isDropStart = dropdown.classList.contains(BS_CLASS_DROPSTART) || (\n            !dropdown.classList.contains(BS_CLASS_DROPEND)\n            && (menuEndRegex.test(menu.className))\n        );\n\n        menu.querySelectorAll(`:scope > ${BS_SELECTOR_DROPDOWN}`).forEach(function(menuItem) {\n\n            const submenu = menuItem.querySelector(`:scope > ${BS_SELECTOR_MENU}`);\n\n            if (!submenu) {\n                return;\n            }\n\n            submenu.style.visibility = 'hidden';\n            submenu.classList.add(BS_CLASS_SHOW);\n\n            const subwidth = submenu.offsetWidth;\n\n            submenu.classList.remove(BS_CLASS_SHOW);\n            submenu.style.visibility = null;\n\n            const classList = menuItem.classList;\n\n            if (isRTL) {\n                if (isDropStart) {\n                    if (right + subwidth > clientWidth) {\n                        classList.remove(BS_CLASS_DROPSTART);\n                        classList.add(BS_CLASS_DROPEND);\n                    } else {\n                        classList.remove(BS_CLASS_DROPEND);\n                        classList.add(BS_CLASS_DROPSTART);\n                    }\n                } else {\n                    if (left - subwidth < 0) {\n                        classList.remove(BS_CLASS_DROPEND);\n                        classList.add(BS_CLASS_DROPSTART);\n                    } else {\n                        classList.remove(BS_CLASS_DROPSTART);\n                        classList.add(BS_CLASS_DROPEND);\n                    }\n                }\n            } else {\n                if (isDropStart) {\n                    if (left - subwidth < 0) {\n                        classList.remove(BS_CLASS_DROPSTART);\n                        classList.add(BS_CLASS_DROPEND);\n                    } else {\n                        classList.remove(BS_CLASS_DROPEND);\n                        classList.add(BS_CLASS_DROPSTART);\n                    }\n                } else {\n                    if (right + subwidth > clientWidth) {\n                        classList.remove(BS_CLASS_DROPEND);\n                        classList.add(BS_CLASS_DROPSTART);\n                    } else {\n                        classList.remove(BS_CLASS_DROPSTART);\n                        classList.add(BS_CLASS_DROPEND);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * CLOSE MENUS AND REMOVE DROP-CLASSES ON OPT.breakpoint CROSSING\n     *\n     * @param {HTMLElement} navbar\n     * @param {Number} breakpoint\n     * @param {Number|undefined} previousWidth\n     * @return {undefined}\n     */\n    function handleBreakpointCrossing(navbar, breakpoint, previousWidth) {\n\n        const currentWidth = getClientWidth();\n\n        if (previousWidth < breakpoint && currentWidth >= breakpoint) {\n            closeInnerDropdowns(navbar);\n        } else if (previousWidth >= breakpoint && currentWidth < breakpoint) {\n            closeInnerDropdowns(navbar);\n            navbar.querySelectorAll(`.${BS_CLASS_DROPEND}, .${BS_CLASS_DROPEND}`).forEach(function(menuItem) {\n                menuItem.classList.remove(BS_CLASS_DROPSTART);\n                menuItem.classList.remove(BS_CLASS_DROPEND);\n            });\n        }\n\n        return currentWidth;\n    }\n\n    /**\n     * Move to next/previous element in a list or cycle through it\n     *\n     * @param {Array} list\n     * @param {HTMLElement} element\n     * @param {Boolean} shouldGetNext\n     * @param {Boolean} cycle\n     * @return {HTMLElement}\n     */\n    function getNextElement(list, element, shouldGetNext, cycle) {\n\n        const listLength = list.length;\n        let index = list.indexOf(element);\n\n        if (index === -1) {\n            return list[0];\n        }\n\n        index += shouldGetNext ? 1 : -1;\n\n        if (cycle) {\n            index = (index + listLength) % listLength;\n        }\n\n        return list[Math.max(0, Math.min(index, listLength - 1))];\n    }\n\n    /**\n     * Handler function for ENTER | UP | DOWN keypress\n     *\n     * This is used inside a capturing handler\n     *\n     * @param {Event} e\n     * @param {HTMLElement} navbar\n     * @param {Boolean} dispatchCustomEvent Dispatch a custom event?\n     * @return {undefined}\n     */\n    function handleKeydown(e, navbar, dispatchCustomEvent) {\n\n        // Let bootstrap handlers deal with ESCAPE and TAB\n        if (!e.key || e.key === ESCAPE_KEY || e.key === TAB_KEY) {\n            return;\n        }\n\n        // ENTER | UP | DOWN keypress are handled\n        const isValidKeyEvent = [ENTER_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY].includes(e.key);\n        if (!isValidKeyEvent) {\n            return;\n        }\n\n        const target = e.target;\n        // Let bootstrap dropdown handle top-level (nav-link) dropdown-items and\n        // other elements such as form inputs\n        if (!target || !target.classList.contains(BS_CLASS_DROPDOWN_ITEM)) {\n            return;\n        }\n\n        // DO NOT HANDLE events for targets outside our navbar\n        if (navbar instanceof HTMLElement && !navbar.contains(target)) {\n            return;\n        }\n\n        // STOP DOWNWARD propagation from here\n        e.stopPropagation();\n\n        if (e.key === ENTER_KEY) {\n            if (target.matches(BS_SELECTOR_DATA_TOGGLE)) {\n                // Only prevent default behaviour on dropdown togglers\n                e.preventDefault();\n                target.click();\n                // Apply focus on 1st submenu item if any\n                const subItem = target.parentElement.querySelector(`:scope ${BS_SELECTOR_VISIBLE_ITEMS}`);\n                if (subItem) {\n                    subItem.focus();\n                }\n            }\n        } else {\n            const menu = target.closest(BS_SELECTOR_MENU);\n            if (menu instanceof HTMLElement) {\n                const items = [].concat(\n                    ...menu.querySelectorAll(`:scope > li > ${P3_SELECTOR_VISIBLE_ITEMS}`)\n                );\n\n                const isNavKeyEvent = e.key === ARROW_DOWN_KEY || e.key === ARROW_UP_KEY;\n                if (isNavKeyEvent) {\n                    const nextItem = getNextElement(items, target, e.key !== ARROW_UP_KEY, true);\n                    if (nextItem) {\n                        nextItem.focus();\n                        closeSiblingDropdowns(nextItem.parentElement);\n                    }\n                }\n            }\n        }\n\n        // Dispatch custom event?\n        if (dispatchCustomEvent) {\n            target.dispatchEvent(new KeyboardEvent(P3_EVENT_KEYDOWN, e));\n        }\n    }\n\n    /**\n     * SHOW/HIDE ON HOVER\n     *\n     * @param {HTMLElement} navbar\n     * @param {Number} breakpoint\n     * @param {Number} timeout\n     * @return {undefined}\n     */\n    function activateHover(navbar, breakpoint, timeout) {\n\n        const dropdowns = navbar.querySelectorAll(BS_SELECTOR_DROPDOWN);\n\n        dropdowns.forEach(function(menuItem) {\n            menuItem.addEventListener('mouseenter', function(e) {\n                handleMouseEnter(menuItem, breakpoint, timeout);\n            });\n            menuItem.addEventListener('mouseleave', function(e) {\n                handleMouseLeave(menuItem, breakpoint, timeout);\n            });\n        });\n    }\n\n    /**\n     * Helper method for mouseenter event handler\n     *\n     * @param {HTMLElement} menuItem\n     * @param {Number} breakpoint\n     * @param {Number} timeout\n     * @return {undefined}\n     */\n    function handleMouseEnter(menuItem, breakpoint, timeout) {\n\n        if (getClientWidth() < breakpoint) {\n            return;\n        }\n\n        const toggleElement = menuItem.querySelector(BS_SELECTOR_DATA_TOGGLE);\n\n        if (toggleElement instanceof HTMLElement) {\n            if (timeout > 0) {\n                // Clear the previously registered timeout, if any\n                const timeoutID = toggleElement.getAttribute(`data-${P3_DATA_TIMEOUT_ID}`);\n                if (timeoutID > 0) {\n                    clearTimeout(timeoutID);\n                }\n            }\n            if (!toggleElement.classList.contains(BS_CLASS_SHOW)) {\n                const toggle = BsDropdown.getOrCreateInstance(toggleElement);\n                if (toggle instanceof BsDropdown) {\n                    toggle.show();\n                }\n            }\n        }\n    }\n\n    /**\n     * Helper method for mouseleave event handler\n     *\n     * @param {HTMLElement} menuItem\n     * @param {Number} breakpoint\n     * @param {Number} timeout\n     * @return {undefined}\n     */\n    function handleMouseLeave(menuItem, breakpoint, timeout) {\n\n        if (getClientWidth() < breakpoint) {\n            return;\n        }\n\n        const toggleElement = menuItem.querySelector(BS_SELECTOR_DATA_TOGGLE);\n\n        if (toggleElement instanceof HTMLElement) {\n            // Clear the previously registered timeout, if any\n            if (toggleElement.classList.contains(BS_CLASS_SHOW) && timeout > 0) {\n                const timeoutID = toggleElement.getAttribute(`data-${P3_DATA_TIMEOUT_ID}`);\n                if (timeoutID > 0) {\n                    clearTimeout(timeoutID);\n                }\n            }\n            // Add a timeout for delaying hide events so that the mouse leaving\n            // the control will not immediatly close the submenu\n            toggleElement.setAttribute(`data-${P3_DATA_TIMEOUT_ID}`, setTimeout(\n                function() {\n                    if (toggleElement.classList.contains(BS_CLASS_SHOW)) {\n                        const toggle = BsDropdown.getOrCreateInstance(toggleElement);\n                        if (toggle instanceof BsDropdown) {\n                            toggle.hide();\n                        }\n                    }\n                },\n                timeout\n            ));\n        }\n    }\n\n    /**\n     * Determine navbar expand breakpoint form expand-(sm|md|lg|xl) class if present\n     *\n     * @param {HTMLElement} navbar\n     * @return {integer|null}\n     */\n    function getExpandBreakpoint(navbar) {\n        for (const nc of navbar.classList) {\n            const rootStyle = window.getComputedStyle(document.documentElement);\n            const breakpoint = parseInt(rootStyle.getPropertyValue(`--p3-bs-${nc}`));\n            if (Number.isInteger(breakpoint)) {\n                return breakpoint;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * p3bsNavbar main function\n     *\n     * @param {string} selector A valid string selector, an HTMLElement, an\n     *      Array of elements or a NodeList\n     * @param {Object} options\n     * @return {undefined}\n     */\n    const p3bsNavbar = function(selector, options) {\n\n        const OPTIONS = Object.assign({}, p3bsNavbar.defaults, options);\n\n        let navbars = [];\n\n        if (typeof(selector) === 'string') {\n            navbars = document.querySelectorAll(selector);\n        } else if (selector instanceof HTMLElement) {\n            navbars = [selector];\n        } else if (selector instanceof Array || selector instanceof NodeList) {\n            selector.forEach(function(element) {\n                if (element instanceof HTMLElement) {\n                    navbars.push(element);\n                }\n            });\n        }\n\n        navbars.forEach(function(navbar) {\n            // Make a copy to preserve the original OPTIONS object\n            const OPT = Object.assign({}, OPTIONS);\n\n            // Determine navbar expand breakpoint\n            const breakpoint = getExpandBreakpoint(navbar);\n            if (breakpoint > 0) {\n                OPT.breakpoint = breakpoint;\n            }\n\n            if (OPT.customEvents) {\n                // Dispatch custom event on BS_EVENT_SHOW\n                navbar.addEventListener(BS_EVENT_SHOW, function(e) {\n                    const target = e.relatedTarget || e.target;\n                    target.dispatchEvent(new Event(P3_EVENT_SHOW, P3_EVENT_OPTS));\n                });\n\n                // Dispatch custom event on BS_EVENT_HIDE\n                navbar.addEventListener(BS_EVENT_HIDE, function(e) {\n                    const target = e.relatedTarget || e.target;\n                    target.dispatchEvent(new Event(P3_EVENT_HIDE, P3_EVENT_OPTS));\n                });\n            }\n\n            // handle BS_EVENT_SHOWN events\n            navbar.addEventListener(BS_EVENT_SHOWN, function(e) {\n                handleShownEvent(e, OPT.breakpoint, OPT.closeOthers, OPT.stopPropagation);\n            });\n\n            // handle BS_EVENT_HIDDEN events\n            navbar.addEventListener(BS_EVENT_HIDDEN, function(e) {\n                handleHiddenEvent(e, OPT.stopPropagation, OPT.customEvents);\n            });\n\n            // handle CLICK events (BS_EVENT_CLICK_DATA_API not used)\n            navbar.addEventListener('click', function(e) {\n                handleClickDataApiEvent(e, OPT.hover, OPT.timeout, OPT.customEvents);\n            });\n\n            // handle KEYDOWN events (BS_EVENT_KEYDOWN_DATA_API not used)\n            document.addEventListener('keydown', function(e) {\n                handleKeydown(e, navbar, OPT.customEvents);\n            }, true); // CAPTURE events before document where bs listeners are registered\n\n            // Close menus on OPT.breakpoint crossing\n            let previousWidth = getClientWidth();\n            window.addEventListener('resize', function(e) {\n                previousWidth = handleBreakpointCrossing(navbar, breakpoint, previousWidth);\n            });\n\n            // Activate hover dropdown\n            if (OPT.hover && !isTouchDevice) {\n                activateHover(navbar, OPT.breakpoint, OPT.timeout);\n            }\n\n            // Close external dropdowns on showing navbar dropdowns\n            navbar.addEventListener(P3_EVENT_SHOWN, function(e) {\n                closeExternalDropdowns(navbar);\n                if (OPT.stopPropagation) {\n                    e.stopPropagation(); // no need to propagate outside the navbar\n                }\n            });\n        });\n    };\n\n    p3bsNavbar.defaults = {\n        breakpoint: 768,\n        hover: false,\n        timeout: 250,\n        closeOthers: false,\n        stopPropagation: false,\n        customEvents: false,\n    };\n\n    // Define the vendor namespace and library namespace and if not already set\n    window.pine3ree = window.pine3ree || {};\n    window.pine3ree.bs = window.pine3ree.bs || {};\n\n    // Assign the main function to the right namespace\n    window.pine3ree.bs.navbar = p3bsNavbar;\n    // Assign the main function to the window object using the same name for the\n    // jQuery plugin\n    window.p3bsNavbar = p3bsNavbar;\n\n    // Add jQuery plugin if jQuery is loaded\n    if (typeof($) === 'function' && $().fn === $.jquery) {\n        $.fn.p3bsNavbar = function(options) {\n            const opts = $.extend($.fn.p3bsNavbar.defaults, options);\n            p3bsNavbar(this.get(), opts);\n        };\n\n        $.fn.p3bsNavbar.defaults = p3bsNavbar.defaults;\n    }\n})(window.bootstrap, window.jQuery);\n"]}