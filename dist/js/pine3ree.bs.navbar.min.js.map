{"version":3,"sources":["pine3ree.bs.navbar.js"],"names":["window","bootstrap","Dropdown","Error","$","P3_DATA_KEY","P3_EVENT_KEY","concat","P3_NAME","bubbles","cancelable","P3_EVENT_HIDDEN","P3_EVENT_CLICK","P3_EVENT_HIDE","P3_EVENT_SHOWN","P3_DATA_TIMEOUT_ID","BS_NAME","BS_DATA_KEY","ENTER_KEY","ESCAPE_KEY","ARROW_DOWN_KEY","BS_EVENT_KEY","RIGHT_MOUSE_BUTTON","BS_EVENT_SHOW","BS_EVENT_HIDE","BS_EVENT_CLICK_DATA_API","BS_DATA_API_KEY","BS_EVENT_KEYUP_DATA_API","BS_CLASS_SHOW","BS_CLASS_DROPSTART","BS_CLASS_DROPUP_CENTER","BS_SELECTOR_DATA_TOGGLE","BS_CLASS_DROPDOWN_CENTER","BS_SELECTOR_DATA_TOGGLE_SHOWN","BS_SELECTOR_DROPDOWN","BS_SELECTOR_DROPDOWN_SHOWN","BS_CLASS_MENU","BS_SELECTOR_MENU","BS_SELECTOR_MENU_SHOWN","BS_SELECTOR_NAVBAR","BS_CLASS_MENU_END","BS_CLASS_DROPDOWN_ITEM","BS_SELECTOR_MENU_END","BS_SELECTOR_VISIBLE_ITEMS","P3_SELECTOR_VISIBLE_ITEMS","isTouchDevice","BsDropdown","isRTL","innerWidth","document","clientWidth","getSiblings","element","selector","toggle","HTMLElement","siblings","getAttribute","disabled","classList","contains","handleShownEvent","breakpoint","closeOthers","stopPropagation","child","length","undefined","arguments","target","e","relatedTarget","isEnabledToggle","dropdown","closest","getClientWidth","add","querySelectorAll","menu","forEach","remove","BS_CLASS_DROPEND","left","getBoundingClientRect","right","offsetWidth","isDropStart","menuEndRegex","test","className","menuItem","submenu","querySelector","containers","container","Array","style","visibility","push","hide","event","Event","subwidth","closeSiblingDropdowns","toggleElement","setChildrenDropDirection","otherNavs","BS_SELECTOR_NAVBAR_NAV","currentNav","parentElement","otherNav","closeInnerDropdowns","dispatchEvent","P3_EVENT_OPTS","dispatchCustomEvent","NodeList","c","getOrCreateInstance","handleClickDataApiEvent","parent","documentElement","sibling","timeoutID","clearTimeout","handleKeydown","navbar","key","ARROW_UP_KEY","includes","matches","shouldGetNext","cycle","index","list","indexOf","listLength","Math","max","min","nextItem","focus","KeyboardEvent","P3_EVENT_KEYDOWN","activateHover","timeout","handleBreakpointCrossing","handleMouseEnter","addEventListener","setAttribute","setTimeout","handleMouseLeave","p3bsNavbar","options","OPTIONS","Object","assign","defaults","navbars","isValidKeyEvent","OPT","nc","rootStyle","parseInt","getPropertyValue","Number","customEvents","P3_EVENT_SHOW","BS_EVENT_SHOWN","BS_EVENT_HIDDEN","handleHiddenEvent","closeOtherNavs","hover","MouseEvent","items","isNavKeyEvent","previousWidth","currentWidth","dropdowns","pine3ree","bs","fn","jquery","opts","extend","this","get","jQuery"],"mappings":"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","file":"pine3ree.bs.navbar.min.js","sourcesContent":["/*!\n * @package pine3ree-bs-navbar (https://github.com/pine3ree/pine3ree-bs-navbar/)\n * @description A multilevel-menu navbar for bootstrap 5.3.x\n * @author pine3ree https://github.com/pine3ree\n * @copyright Copyright 2023-today pine3ree\n * @license Licensed under BSD-3 Clear License (https://github.com/pine3ree/pine3ree-bs-navbar/blob/master/LICENSE)\n */\n\n/* jslint browser:true */\n/* global document, window */\n\n'use strict';\n\n// Check bootstrap library\nif (!window.bootstrap || !window.bootstrap.Dropdown) {\n    throw new Error('bootstrap.Dropdown library was not found');\n}\n\n(function(bootstrap, $) {\n\n    const P3_NAME = 'p3bsNavbar';\n\n    const P3_DATA_KEY = 'p3.navbar.dropdown';\n    const P3_EVENT_KEY = `.${P3_DATA_KEY}`;\n    const P3_EVENT_OPTS = { bubbles: true, cancelable: true };\n    const P3_EVENT_CLICK = `click${P3_EVENT_KEY}`;\n    const P3_EVENT_HIDE = `hide${P3_EVENT_KEY}`;\n    const P3_EVENT_HIDDEN = `hidden${P3_EVENT_KEY}`;\n    const P3_EVENT_SHOW = `show${P3_EVENT_KEY}`;\n    const P3_EVENT_SHOWN = `shown${P3_EVENT_KEY}`;\n    const P3_EVENT_KEYDOWN = `keydown${P3_EVENT_KEY}`;\n    const P3_EVENT_KEYUP = `keyup${P3_EVENT_KEY}`;\n    const P3_DATA_TIMEOUT_ID = `timeoutID.${P3_DATA_KEY}`;\n\n    const BS_NAME = 'dropdown';\n    const BS_DATA_KEY = 'bs.dropdown';\n    const BS_EVENT_KEY = `.${BS_DATA_KEY}`;\n    const BS_DATA_API_KEY = '.data-api';\n\n    const ENTER_KEY = 'Enter';\n    const ESCAPE_KEY = 'Escape';\n    const TAB_KEY = 'Tab';\n    const ARROW_UP_KEY = 'ArrowUp';\n    const ARROW_DOWN_KEY = 'ArrowDown';\n    const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button\n\n    const BS_EVENT_HIDE = `hide${BS_EVENT_KEY}`;\n    const BS_EVENT_HIDDEN = `hidden${BS_EVENT_KEY}`;\n    const BS_EVENT_SHOW = `show${BS_EVENT_KEY}`;\n    const BS_EVENT_SHOWN = `shown${BS_EVENT_KEY}`;\n    const BS_EVENT_CLICK_DATA_API = `click${BS_EVENT_KEY}${BS_DATA_API_KEY}`;\n    const BS_EVENT_KEYDOWN_DATA_API = `keydown${BS_EVENT_KEY}${BS_DATA_API_KEY}`;\n    const BS_EVENT_KEYUP_DATA_API = `keyup${BS_EVENT_KEY}${BS_DATA_API_KEY}`;\n\n    const BS_CLASS_SHOW = 'show';\n    const BS_CLASS_DROPUP = 'dropup';\n    const BS_CLASS_DROPEND = 'dropend';\n    const BS_CLASS_DROPSTART = 'dropstart';\n    const BS_CLASS_DROPUP_CENTER = 'dropup-center';\n    const BS_CLASS_DROPDOWN_CENTER = 'dropdown-center';\n\n    const BS_SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"dropdown\"]:not(.disabled):not(:disabled)';\n    const BS_SELECTOR_DATA_TOGGLE_SHOWN = `${BS_SELECTOR_DATA_TOGGLE}.${BS_CLASS_SHOW}`;\n    const BS_SELECTOR_DROPDOWN = '.dropdown';\n    const BS_SELECTOR_DROPDOWN_SHOWN = `${BS_SELECTOR_DROPDOWN}.${BS_CLASS_SHOW}`;\n    const BS_CLASS_DROPDOWN_ITEM = 'dropdown-item';\n    const BS_CLASS_MENU = 'dropdown-menu';\n    const BS_SELECTOR_MENU = `.${BS_CLASS_MENU}`;\n    const BS_SELECTOR_MENU_SHOWN = `${BS_SELECTOR_MENU}.${BS_CLASS_SHOW}`;\n    const BS_CLASS_NAVBAR = 'navbar';\n    const BS_SELECTOR_NAVBAR = `.${BS_CLASS_NAVBAR}`;\n    const BS_CLASS_MENU_END = `${BS_CLASS_MENU}-end`;\n    const BS_SELECTOR_MENU_END = `${BS_SELECTOR_MENU}.${BS_CLASS_MENU_END}`;\n    const BS_SELECTOR_NAVBAR_NAV = '.navbar-nav';\n    const BS_SELECTOR_VISIBLE_ITEMS = `.dropdown-menu .${BS_CLASS_DROPDOWN_ITEM}:not(.disabled):not(:disabled)`;\n    const P3_SELECTOR_VISIBLE_ITEMS = `.${BS_CLASS_DROPDOWN_ITEM}:not(.disabled):not(:disabled)`;\n\n    // dropdown-menu-(sm|md|lg)-end\n    const menuEndRegex = new RegExp(`${BS_CLASS_MENU}(?:-[a-z]{2,3})?-end`);\n\n    const isRTL = document.documentElement.dir === 'rtl';\n    const isTouchDevice = 'ontouchstart' in window;\n\n    const BsDropdown = bootstrap.Dropdown;\n\n\n    /**\n     * Get the html document width\n     *\n     * @return {Number}\n     */\n    function getClientWidth() {\n        return Math.max(window.innerWidth, document.documentElement.clientWidth);\n    }\n\n    /**\n     * Get an Array of siblings of an HTMLElement\n     *\n     * @param {HTMLElement} element\n     * @param {string} selector\n     * @return {Array}\n     */\n    function getSiblings(element, selector = '*') {\n\n        const siblings = [];\n\n        if (element instanceof HTMLElement) {\n            const parent = element.parentElement;\n            if (parent instanceof HTMLElement) {\n                parent.querySelectorAll(`:scope > ${selector}`).forEach(function(child) {\n                    if (child !== element && child instanceof HTMLElement) {\n                        siblings.push(child);\n                    }\n                });\n            }\n        }\n\n        return siblings;\n    }\n\n    /**\n     * Check if element is an enabled dropdown toggler\n     *\n     * @param {HTMLElement} toggle\n     * @return {Boolean}\n     */\n    function isEnabledToggle(toggle) {\n\n        if (toggle && toggle instanceof HTMLElement) {\n            return (\n                toggle.getAttribute('data-bs-toggle') === 'dropdown'\n                && !toggle.disabled\n                && !toggle.classList.contains('disabled')\n            );\n        }\n\n        return false;\n    }\n\n    /**\n     * Helper function for BS_EVENT_SHOWN event handlers\n     *\n     * @param {Event} e\n     * @param {Number} breakpoint\n     * @param {Boolean} closeOthers\n     * @param {Boolean} stopPropagation\n     * @return {undefined}\n     */\n    function handleShownEvent(e, breakpoint, closeOthers, stopPropagation = false) {\n\n        const target = e.relatedTarget || e.target;\n\n        if (!isEnabledToggle(target)) {\n            return;\n        }\n\n        // If toggler is matched prevent bubbling up?\n        if (stopPropagation) {\n            e.stopPropagation();\n        }\n\n        const dropdown = target.closest(BS_SELECTOR_DROPDOWN);\n\n        if (dropdown instanceof HTMLElement) {\n            const clientWidth = getClientWidth();\n\n            dropdown.classList.add(BS_CLASS_SHOW);\n\n            setChildrenDropDirection(dropdown, clientWidth, breakpoint);\n\n            if (closeOthers || clientWidth >= breakpoint) {\n                closeOtherNavs(dropdown);\n                closeSiblingDropdowns(dropdown);\n            }\n        }\n\n        // MUST dispatch custom event (used to close external dropdowns)\n        target.dispatchEvent(new Event(P3_EVENT_SHOWN, P3_EVENT_OPTS));\n    }\n\n    /**\n     * Helper function for BS_EVENT_HIDDEN event handlers\n     *\n     * @param {Event} e\n     * @param {Boolean} stopPropagation\n     * @param {Boolean} dispatchCustomEvent Dispatch a custom event?\n     * @return {undefined}\n     */\n    function handleHiddenEvent(e, stopPropagation = false, dispatchCustomEvent = false) {\n\n        const target = e.relatedTarget || e.target;\n\n        if (!isEnabledToggle(target)) {\n            return;\n        }\n\n        // If it is a toggler prevent bubbling?\n        if (stopPropagation) {\n            e.stopPropagation();\n        }\n\n        const dropdown = target.parentElement.closest(BS_SELECTOR_DROPDOWN);\n        if (dropdown instanceof HTMLElement) {\n            dropdown.classList.remove(BS_CLASS_SHOW);\n            closeInnerDropdowns(dropdown);\n        }\n\n        // Dispatch custom event?\n        if (dispatchCustomEvent) {\n            target.dispatchEvent(new Event(P3_EVENT_HIDDEN, P3_EVENT_OPTS));\n        }\n    }\n\n    /**\n     *  Helper function for BS_EVENT_CLICK_DATA_API event handlers\n     *\n     * @param {Event} e\n     * @param {Boolean} hover\n     * @param {Number} timeout\n     * @param {Boolean} dispatchCustomEvent Dispatch a custom event?\n     * @return {undefined}\n     */\n    function handleClickDataApiEvent(e, hover, timeout, dispatchCustomEvent = false) {\n\n        const target = e.relatedTarget || e.target;\n\n        if (!isEnabledToggle(target)) {\n            return;\n        }\n\n        // If it is a toggler we MUST stop bubbling to prevent parent menu from\n        // being closed by the bootstrap handler\n        e.stopPropagation();\n\n        // Remove any running timer\n        if (hover && timeout > 0) {\n            const timeoutID = target.getAttribute(`data-${P3_DATA_TIMEOUT_ID}`);\n            if (timeoutID > 0) {\n                clearTimeout(timeoutID);\n            }\n        }\n\n        // Dispatch custom event?\n        if (dispatchCustomEvent) {\n            target.dispatchEvent(new MouseEvent(P3_EVENT_CLICK, e));\n        }\n    }\n\n    /**\n     * Close any dropdown not contained in this navbar\n     *\n     * @param {HTMLElement} navbar\n     * @return {undefined}\n     */\n    function closeExternalDropdowns(navbar) {\n\n        if (!(navbar instanceof HTMLElement)) {\n            return;\n        }\n\n        document.querySelectorAll(BS_SELECTOR_DATA_TOGGLE_SHOWN).forEach(function(toggleElement) {\n            if (!navbar.contains(toggleElement)) {\n                const toggle = BsDropdown.getOrCreateInstance(toggleElement);\n                if (toggle instanceof BsDropdown) {\n                    toggle.hide();\n                }\n            }\n        });\n    }\n\n    /**\n     * Hides all dropdowns inside the given container\n     *\n     * @param {HTMLElement|Array|NodeList} container\n     * @param {Event} event\n     * @param {boolean} [stopPropagation=true]\n     * @return {undefined}\n     */\n    function closeInnerDropdowns(container, event, stopPropagation = false) {\n\n        const containers = [];\n\n        if (container instanceof Array || container instanceof NodeList) {\n            container.forEach(function(c) {\n                if (c instanceof HTMLElement) {\n                    containers.push(c);\n                }\n            });\n        } else if (container instanceof HTMLElement) {\n            containers.push(container);\n        }\n\n        if (containers.length > 0) {\n            containers.forEach(function(container) {\n                container.querySelectorAll(BS_SELECTOR_DATA_TOGGLE_SHOWN).forEach(function(toggleElement) {\n                    const toggle = BsDropdown.getOrCreateInstance(toggleElement);\n                    if (toggle instanceof BsDropdown) {\n                        toggle.hide();\n                    }\n                });\n            });\n        }\n\n        if (event instanceof Event && stopPropagation === true) {\n            event.stopPropagation();\n        }\n    }\n\n    /**\n     * Close siblings nav menu-items\n     *\n     * @param {HTMLElement} dropdown\n     * @param {Event} event\n     * @param {Boolean} stopPropagation\n     * @return {undefined}\n     */\n    function closeSiblingDropdowns(dropdown, event, stopPropagation = false) {\n\n        getSiblings(dropdown, BS_SELECTOR_DROPDOWN).forEach(function(sibling) {\n            const toggleElement = sibling.querySelector(BS_SELECTOR_DATA_TOGGLE_SHOWN);\n            if (toggleElement) {\n                const toggle = BsDropdown.getOrCreateInstance(toggleElement);\n                if (toggle instanceof BsDropdown) {\n                    toggle.hide();\n                }\n            }\n        });\n    }\n\n    /**\n     * Close other navbar-nav in the same navbar\n     *\n     * @param {HTMLElement} dropdown\n     * @param {Event} event\n     * @param {Boolean} stopPropagation\n     * @return {undefined}\n     */\n    function closeOtherNavs(dropdown, event, stopPropagation = false) {\n\n        const otherNavs = document.querySelectorAll(`${BS_SELECTOR_NAVBAR} ${BS_SELECTOR_NAVBAR_NAV}`);\n        const currentNav = dropdown.parentElement.closest(BS_SELECTOR_NAVBAR_NAV);\n\n        otherNavs.forEach(function(otherNav) {\n            if (otherNav !== currentNav) {\n                closeInnerDropdowns(otherNav, event, stopPropagation);\n            }\n        });\n    }\n\n    /**\n     * Set the direction of a dropdown's children/submenu\n     *\n     * @param {HTMLElement} dropdown\n     * @param {Number} clientWidth\n     * @param {Number} breakpoint\n     * @return {undefined}\n     */\n    function setChildrenDropDirection(dropdown, clientWidth, breakpoint) {\n\n        const menu = dropdown.querySelector(`:scope > ${BS_SELECTOR_MENU}`);\n\n        if (!(menu instanceof HTMLElement)) {\n            return;\n        }\n\n        if (clientWidth < breakpoint) {\n            menu.querySelectorAll(BS_SELECTOR_DROPDOWN).forEach(function(child) {\n                child.classList.remove(BS_CLASS_DROPEND);\n                child.classList.remove(BS_CLASS_DROPSTART);\n            });\n            return;\n        }\n\n        const left = menu.getBoundingClientRect().left;\n        const right = left + menu.offsetWidth;\n\n        const isDropStart = dropdown.classList.contains(BS_CLASS_DROPSTART) || (\n            !dropdown.classList.contains(BS_CLASS_DROPEND)\n            && (menuEndRegex.test(menu.className))\n        );\n\n        menu.querySelectorAll(`:scope > ${BS_SELECTOR_DROPDOWN}`).forEach(function(menuItem) {\n\n            const submenu = menuItem.querySelector(`:scope > ${BS_SELECTOR_MENU}`);\n\n            if (!submenu) {\n                return;\n            }\n\n            submenu.style.visibility = 'hidden';\n            submenu.classList.add(BS_CLASS_SHOW);\n\n            const subwidth = submenu.offsetWidth;\n\n            submenu.classList.remove(BS_CLASS_SHOW);\n            submenu.style.visibility = null;\n\n            const classList = menuItem.classList;\n\n            if (isRTL) {\n                if (isDropStart) {\n                    if (right + subwidth > clientWidth) {\n                        classList.remove(BS_CLASS_DROPSTART);\n                        classList.add(BS_CLASS_DROPEND);\n                    } else {\n                        classList.remove(BS_CLASS_DROPEND);\n                        classList.add(BS_CLASS_DROPSTART);\n                    }\n                } else {\n                    if (left - subwidth < 0) {\n                        classList.remove(BS_CLASS_DROPEND);\n                        classList.add(BS_CLASS_DROPSTART);\n                    } else {\n                        classList.remove(BS_CLASS_DROPSTART);\n                        classList.add(BS_CLASS_DROPEND);\n                    }\n                }\n            } else {\n                if (isDropStart) {\n                    if (left - subwidth < 0) {\n                        classList.remove(BS_CLASS_DROPSTART);\n                        classList.add(BS_CLASS_DROPEND);\n                    } else {\n                        classList.remove(BS_CLASS_DROPEND);\n                        classList.add(BS_CLASS_DROPSTART);\n                    }\n                } else {\n                    if (right + subwidth > clientWidth) {\n                        classList.remove(BS_CLASS_DROPEND);\n                        classList.add(BS_CLASS_DROPSTART);\n                    } else {\n                        classList.remove(BS_CLASS_DROPSTART);\n                        classList.add(BS_CLASS_DROPEND);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * CLOSE MENUS AND REMOVE DROP-CLASSES ON OPT.breakpoint CROSSING\n     *\n     * @param {HTMLElement} navbar\n     * @param {Number} breakpoint\n     * @param {Number|undefined} previousWidth\n     * @return {undefined}\n     */\n    function handleBreakpointCrossing(navbar, breakpoint, previousWidth) {\n\n        const currentWidth = getClientWidth();\n\n        if (previousWidth < breakpoint && currentWidth >= breakpoint) {\n            closeInnerDropdowns(navbar);\n        } else if (previousWidth >= breakpoint && currentWidth < breakpoint) {\n            closeInnerDropdowns(navbar);\n            navbar.querySelectorAll(`.${BS_CLASS_DROPEND}, .${BS_CLASS_DROPEND}`).forEach(function(menuItem) {\n                menuItem.classList.remove(BS_CLASS_DROPSTART);\n                menuItem.classList.remove(BS_CLASS_DROPEND);\n            });\n        }\n\n        return currentWidth;\n    }\n\n    /**\n     * Move to next/previous element in a list or cycle through it\n     *\n     * @param {Array} list\n     * @param {HTMLElement} element\n     * @param {Boolean} shouldGetNext\n     * @param {Boolean} cycle\n     * @return {HTMLElement}\n     */\n    function getNextElement(list, element, shouldGetNext, cycle) {\n\n        const listLength = list.length;\n        let index = list.indexOf(element);\n\n        if (index === -1) {\n            return list[0];\n        }\n\n        index += shouldGetNext ? 1 : -1;\n\n        if (cycle) {\n            index = (index + listLength) % listLength;\n        }\n\n        return list[Math.max(0, Math.min(index, listLength - 1))];\n    }\n\n    /**\n     * Handler function for ENTER | UP | DOWN keypress\n     *\n     * This is used inside a capturing handler\n     *\n     * @param {Event} e\n     * @param {HTMLElement} navbar\n     * @param {Boolean} dispatchCustomEvent Dispatch a custom event?\n     * @return {undefined}\n     */\n    function handleKeydown(e, navbar, dispatchCustomEvent) {\n\n        // Let bootstrap handlers deal with ESCAPE and TAB\n        if (!e.key || e.key === ESCAPE_KEY || e.key === TAB_KEY) {\n            return;\n        }\n\n        // ENTER | UP | DOWN keypress are handled\n        const isValidKeyEvent = [ENTER_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY].includes(e.key);\n        if (!isValidKeyEvent) {\n            return;\n        }\n\n        const target = e.target;\n        // Let bootstrap dropdown handle top-level (nav-link) dropdown-items and\n        // other elements such as form inputs\n        if (!target || !target.classList.contains(BS_CLASS_DROPDOWN_ITEM)) {\n            return;\n        }\n\n        // DO NOT HANDLE events for targets outside our navbar\n        if (navbar instanceof HTMLElement && !navbar.contains(target)) {\n            return;\n        }\n\n        // STOP DOWNWARD propagation from here\n        e.stopPropagation();\n\n        if (e.key === ENTER_KEY) {\n            if (target.matches(BS_SELECTOR_DATA_TOGGLE)) {\n                // Only prevent default behaviour on dropdown togglers\n                e.preventDefault();\n                target.click();\n                // Apply focus on 1st submenu item if any\n                const subItem = target.parentElement.querySelector(`:scope ${BS_SELECTOR_VISIBLE_ITEMS}`);\n                if (subItem) {\n                    subItem.focus();\n                }\n            }\n        } else {\n            const menu = target.closest(BS_SELECTOR_MENU);\n            if (menu instanceof HTMLElement) {\n                const items = [].concat(\n                    ...menu.querySelectorAll(`:scope > li > ${P3_SELECTOR_VISIBLE_ITEMS}`)\n                );\n\n                const isNavKeyEvent = e.key === ARROW_DOWN_KEY || e.key === ARROW_UP_KEY;\n                if (isNavKeyEvent) {\n                    const nextItem = getNextElement(items, target, e.key !== ARROW_UP_KEY, true);\n                    if (nextItem) {\n                        nextItem.focus();\n                        closeSiblingDropdowns(nextItem.parentElement);\n                    }\n                }\n            }\n        }\n\n        // Dispatch custom event?\n        if (dispatchCustomEvent) {\n            target.dispatchEvent(new KeyboardEvent(P3_EVENT_KEYDOWN, e));\n        }\n    }\n\n    /**\n     * SHOW/HIDE ON HOVER\n     *\n     * @param {HTMLElement} navbar\n     * @param {Number} breakpoint\n     * @param {Number} timeout\n     * @return {undefined}\n     */\n    function activateHover(navbar, breakpoint, timeout) {\n\n        const dropdowns = navbar.querySelectorAll(BS_SELECTOR_DROPDOWN);\n\n        dropdowns.forEach(function(menuItem) {\n            menuItem.addEventListener('mouseenter', function(e) {\n                handleMouseEnter(menuItem, breakpoint, timeout);\n            });\n            menuItem.addEventListener('mouseleave', function(e) {\n                handleMouseLeave(menuItem, breakpoint, timeout);\n            });\n        });\n    }\n\n    /**\n     * Helper method for mouseenter event handler\n     *\n     * @param {HTMLElement} menuItem\n     * @param {Number} breakpoint\n     * @param {Number} timeout\n     * @return {undefined}\n     */\n    function handleMouseEnter(menuItem, breakpoint, timeout) {\n\n        if (getClientWidth() < breakpoint) {\n            return;\n        }\n\n        const toggleElement = menuItem.querySelector(BS_SELECTOR_DATA_TOGGLE);\n\n        if (toggleElement instanceof HTMLElement) {\n            if (timeout > 0) {\n                // Clear the previously registered timeout, if any\n                const timeoutID = toggleElement.getAttribute(`data-${P3_DATA_TIMEOUT_ID}`);\n                if (timeoutID > 0) {\n                    clearTimeout(timeoutID);\n                }\n            }\n            if (!toggleElement.classList.contains(BS_CLASS_SHOW)) {\n                const toggle = BsDropdown.getOrCreateInstance(toggleElement);\n                if (toggle instanceof BsDropdown) {\n                    toggle.show();\n                }\n            }\n        }\n    }\n\n    /**\n     * Helper method for mouseleave event handler\n     *\n     * @param {HTMLElement} menuItem\n     * @param {Number} breakpoint\n     * @param {Number} timeout\n     * @return {undefined}\n     */\n    function handleMouseLeave(menuItem, breakpoint, timeout) {\n\n        if (getClientWidth() < breakpoint) {\n            return;\n        }\n\n        const toggleElement = menuItem.querySelector(BS_SELECTOR_DATA_TOGGLE);\n\n        if (toggleElement instanceof HTMLElement) {\n            // Clear the previously registered timeout, if any\n            if (toggleElement.classList.contains(BS_CLASS_SHOW) && timeout > 0) {\n                const timeoutID = toggleElement.getAttribute(`data-${P3_DATA_TIMEOUT_ID}`);\n                if (timeoutID > 0) {\n                    clearTimeout(timeoutID);\n                }\n            }\n            // Add a timeout for delaying hide events so that the mouse leaving\n            // the control will not immediatly close the submenu\n            toggleElement.setAttribute(`data-${P3_DATA_TIMEOUT_ID}`, setTimeout(\n                function() {\n                    if (toggleElement.classList.contains(BS_CLASS_SHOW)) {\n                        const toggle = BsDropdown.getOrCreateInstance(toggleElement);\n                        if (toggle instanceof BsDropdown) {\n                            toggle.hide();\n                        }\n                    }\n                },\n                timeout\n            ));\n        }\n    }\n\n    /**\n     * Determine navbar expand breakpoint form expand-(sm|md|lg|xl) class if present\n     *\n     * @param {HTMLElement} navbar\n     * @return {integer|null}\n     */\n    function getExpandBreakpoint(navbar) {\n        for (const nc of navbar.classList) {\n            const rootStyle = window.getComputedStyle(document.documentElement);\n            const breakpoint = parseInt(rootStyle.getPropertyValue(`--p3-bs-${nc}`));\n            if (Number.isInteger(breakpoint)) {\n                return breakpoint;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * p3bsNavbar main function\n     *\n     * @param {string} selector A valid string selector, an HTMLElement, an\n     *      Array of elements or a NodeList\n     * @param {Object} options\n     * @return {undefined}\n     */\n    const p3bsNavbar = function(selector, options) {\n\n        const OPTIONS = Object.assign({}, p3bsNavbar.defaults, options);\n\n        let navbars = [];\n\n        if (typeof(selector) === 'string') {\n            navbars = document.querySelectorAll(selector);\n        } else if (selector instanceof HTMLElement) {\n            navbars = [selector];\n        } else if (selector instanceof Array || selector instanceof NodeList) {\n            selector.forEach(function(element) {\n                if (element instanceof HTMLElement) {\n                    navbars.push(element);\n                }\n            });\n        }\n\n        navbars.forEach(function(navbar) {\n            // Make a copy to preserve the original OPTIONS object\n            const OPT = Object.assign({}, OPTIONS);\n\n            // Determine navbar expand breakpoint\n            const breakpoint = getExpandBreakpoint(navbar);\n            if (breakpoint > 0) {\n                OPT.breakpoint = breakpoint;\n            }\n\n            if (OPT.customEvents) {\n                // Dispatch custom event on BS_EVENT_SHOW\n                navbar.addEventListener(BS_EVENT_SHOW, function(e) {\n                    const target = e.relatedTarget || e.target;\n                    target.dispatchEvent(new Event(P3_EVENT_SHOW, P3_EVENT_OPTS));\n                });\n\n                // Dispatch custom event on BS_EVENT_HIDE\n                navbar.addEventListener(BS_EVENT_HIDE, function(e) {\n                    const target = e.relatedTarget || e.target;\n                    target.dispatchEvent(new Event(P3_EVENT_HIDE, P3_EVENT_OPTS));\n                });\n            }\n\n            // handle BS_EVENT_SHOWN events\n            navbar.addEventListener(BS_EVENT_SHOWN, function(e) {\n                handleShownEvent(e, OPT.breakpoint, OPT.closeOthers, OPT.stopPropagation);\n            });\n\n            // handle BS_EVENT_HIDDEN events\n            navbar.addEventListener(BS_EVENT_HIDDEN, function(e) {\n                handleHiddenEvent(e, OPT.stopPropagation, OPT.customEvents);\n            });\n\n            // handle CLICK events (BS_EVENT_CLICK_DATA_API not used)\n            navbar.addEventListener('click', function(e) {\n                handleClickDataApiEvent(e, OPT.hover, OPT.timeout, OPT.customEvents);\n            });\n\n            // handle KEYDOWN events (BS_EVENT_KEYDOWN_DATA_API not used)\n            document.addEventListener('keydown', function(e) {\n                handleKeydown(e, navbar, OPT.customEvents);\n            }, true); // CAPTURE events before document where bs listeners are registered\n\n            // Close menus on OPT.breakpoint crossing\n            let previousWidth = getClientWidth();\n            window.addEventListener('resize', function(e) {\n                previousWidth = handleBreakpointCrossing(navbar, breakpoint, previousWidth);\n            });\n\n            // Activate hover dropdown\n            if (OPT.hover && !isTouchDevice) {\n                activateHover(navbar, OPT.breakpoint, OPT.timeout);\n            }\n\n            // Close external dropdowns on showing navbar dropdowns\n            navbar.addEventListener(P3_EVENT_SHOWN, function(e) {\n                closeExternalDropdowns(navbar);\n                if (OPT.stopPropagation) {\n                    e.stopPropagation(); // No need to propagate outside the navbar\n                }\n            });\n        });\n    };\n\n    p3bsNavbar.defaults = {\n        breakpoint: 768,\n        hover: false,\n        timeout: 250,\n        closeOthers: false,\n        stopPropagation: false,\n        customEvents: false,\n    };\n\n    // Define the vendor namespace and library namespace and if not already set\n    window.pine3ree = window.pine3ree || {};\n    window.pine3ree.bs = window.pine3ree.bs || {};\n\n    // Assign the main function to the right namespace\n    window.pine3ree.bs.navbar = p3bsNavbar;\n    // Assign the main function to the window object using the same name for the\n    // jQuery plugin\n    window.p3bsNavbar = p3bsNavbar;\n\n    // Add jQuery plugin if jQuery is loaded\n    if (typeof($) === 'function' && $().fn === $.jquery) {\n        $.fn.p3bsNavbar = function(options) {\n            const opts = $.extend($.fn.p3bsNavbar.defaults, options);\n            p3bsNavbar(this.get(), opts);\n        };\n\n        $.fn.p3bsNavbar.defaults = p3bsNavbar.defaults;\n    }\n})(window.bootstrap, window.jQuery);\n"]}