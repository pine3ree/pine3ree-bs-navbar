{"version":3,"sources":["pine3ree.bs.navbar.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","return","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","_arrayLikeToArray","Object","prototype","slice","constructor","name","from","iter","minLen","len","toString","window","bootstrap","Dropdown","$","P3_DATA_KEY","P3_EVENT_KEY","concat","P3_NAME","bubbles","cancelable","P3_EVENT_HIDDEN","P3_EVENT_CLICK","P3_EVENT_HIDE","P3_EVENT_SHOWN","P3_DATA_TIMEOUT_ID","BS_NAME","BS_DATA_KEY","ENTER_KEY","ESCAPE_KEY","ARROW_DOWN_KEY","BS_EVENT_KEY","RIGHT_MOUSE_BUTTON","BS_EVENT_SHOW","BS_EVENT_HIDE","BS_EVENT_CLICK_DATA_API","BS_DATA_API_KEY","BS_EVENT_KEYUP_DATA_API","BS_CLASS_SHOW","BS_CLASS_DROPSTART","BS_CLASS_DROPUP_CENTER","BS_SELECTOR_DATA_TOGGLE","BS_CLASS_DROPDOWN_CENTER","BS_SELECTOR_DATA_TOGGLE_SHOWN","BS_SELECTOR_DROPDOWN","BS_SELECTOR_DROPDOWN_SHOWN","BS_CLASS_MENU","BS_SELECTOR_MENU","BS_SELECTOR_MENU_SHOWN","BS_SELECTOR_NAVBAR","BS_CLASS_MENU_END","BS_CLASS_DROPDOWN_ITEM","BS_SELECTOR_MENU_END","BS_SELECTOR_VISIBLE_ITEMS","P3_SELECTOR_VISIBLE_ITEMS","isTouchDevice","BsDropdown","getClientWidth","innerWidth","document","documentElement","clientWidth","getSiblings","element","selector","toggle","HTMLElement","siblings","getAttribute","disabled","classList","contains","handleShownEvent","breakpoint","closeOthers","stopPropagation","child","undefined","arguments","target","relatedTarget","isEnabledToggle","dropdown","closest","add","querySelectorAll","menu","forEach","remove","BS_CLASS_DROPEND","left","getBoundingClientRect","right","offsetWidth","isDropStart","menuEndRegex","test","className","menuItem","submenu","querySelector","containers","container","style","visibility","push","isRTL","hide","event","Event","subwidth","closeSiblingDropdowns","toggleElement","setChildrenDropDirection","otherNavs","BS_SELECTOR_NAVBAR_NAV","currentNav","parentElement","otherNav","closeInnerDropdowns","dispatchEvent","P3_EVENT_OPTS","dispatchCustomEvent","NodeList","c","getOrCreateInstance","handleClickDataApiEvent","parent","sibling","timeoutID","clearTimeout","handleKeydown","navbar","key","ARROW_UP_KEY","includes","matches","items","_ref","apply","nextItem","shouldGetNext","cycle","index","list","indexOf","listLength","Math","max","min","KeyboardEvent","P3_EVENT_KEYDOWN","activateHover","timeout","handleBreakpointCrossing","currentWidth","handleMouseEnter","setAttribute","setTimeout","getNextElement","handleMouseLeave","p3bsNavbar","options","OPTIONS","assign","defaults","navbars","isValidKeyEvent","_step","_iterator","nc","rootStyle","getComputedStyle","parseInt","getPropertyValue","Number","isInteger","getExpandBreakpoint","OPT","customEvents","preventDefault","P3_EVENT_SHOW","subItem","isNavKeyEvent","handleHiddenEvent","closeOtherNavs","hover","MouseEvent","addEventListener","previousWidth","closeExternalDropdowns","dropdowns","pine3ree","bs","fn","opts","extend","this","get","jQuery"],"mappings":"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","file":"pine3ree.bs.navbar.min.js","sourcesContent":["/*!\n * @package pine3ree-bs-navbar (https://github.com/pine3ree/pine3ree-bs-navbar/)\n * @description A multilevel-menu navbar for bootstrap 5.3.x\n * @author pine3ree https://github.com/pine3ree\n * @copyright Copyright 2023-today pine3ree\n * @license Licensed under BSD-3 Clear License (https://github.com/pine3ree/pine3ree-bs-navbar/blob/master/LICENSE)\n */\n\n/* jslint browser:true */\n/* global document, window */\n\n'use strict';\n\n// Check bootstrap library\nif (!window.bootstrap || !window.bootstrap.Dropdown) {\n    throw new Error('bootstrap.Dropdown library was not found');\n}\n\n(function(bootstrap, $) {\n\n    const P3_NAME = 'p3bsNavbar';\n\n    const P3_DATA_KEY = 'p3.navbar.dropdown';\n    const P3_EVENT_KEY = `.${P3_DATA_KEY}`;\n    const P3_EVENT_OPTS = { bubbles: true, cancelable: true };\n    const P3_EVENT_CLICK = `click${P3_EVENT_KEY}`;\n    const P3_EVENT_HIDE = `hide${P3_EVENT_KEY}`;\n    const P3_EVENT_HIDDEN = `hidden${P3_EVENT_KEY}`;\n    const P3_EVENT_SHOW = `show${P3_EVENT_KEY}`;\n    const P3_EVENT_SHOWN = `shown${P3_EVENT_KEY}`;\n    const P3_EVENT_KEYDOWN = `keydown${P3_EVENT_KEY}`;\n    const P3_EVENT_KEYUP = `keyup${P3_EVENT_KEY}`;\n    const P3_DATA_TIMEOUT_ID = `timeoutID.${P3_DATA_KEY}`;\n\n    const BS_NAME = 'dropdown';\n    const BS_DATA_KEY = 'bs.dropdown';\n    const BS_EVENT_KEY = `.${BS_DATA_KEY}`;\n    const BS_DATA_API_KEY = '.data-api';\n\n    const ENTER_KEY = 'Enter';\n    const ESCAPE_KEY = 'Escape';\n    const TAB_KEY = 'Tab';\n    const ARROW_UP_KEY = 'ArrowUp';\n    const ARROW_DOWN_KEY = 'ArrowDown';\n    const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button\n\n    const BS_EVENT_HIDE = `hide${BS_EVENT_KEY}`;\n    const BS_EVENT_HIDDEN = `hidden${BS_EVENT_KEY}`;\n    const BS_EVENT_SHOW = `show${BS_EVENT_KEY}`;\n    const BS_EVENT_SHOWN = `shown${BS_EVENT_KEY}`;\n    const BS_EVENT_CLICK_DATA_API = `click${BS_EVENT_KEY}${BS_DATA_API_KEY}`;\n    const BS_EVENT_KEYDOWN_DATA_API = `keydown${BS_EVENT_KEY}${BS_DATA_API_KEY}`;\n    const BS_EVENT_KEYUP_DATA_API = `keyup${BS_EVENT_KEY}${BS_DATA_API_KEY}`;\n\n    const BS_CLASS_SHOW = 'show';\n    const BS_CLASS_DROPUP = 'dropup';\n    const BS_CLASS_DROPEND = 'dropend';\n    const BS_CLASS_DROPSTART = 'dropstart';\n    const BS_CLASS_DROPUP_CENTER = 'dropup-center';\n    const BS_CLASS_DROPDOWN_CENTER = 'dropdown-center';\n\n    const BS_SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"dropdown\"]:not(.disabled):not(:disabled)';\n    const BS_SELECTOR_DATA_TOGGLE_SHOWN = `${BS_SELECTOR_DATA_TOGGLE}.${BS_CLASS_SHOW}`;\n    const BS_SELECTOR_DROPDOWN = '.dropdown';\n    const BS_SELECTOR_DROPDOWN_SHOWN = `${BS_SELECTOR_DROPDOWN}.${BS_CLASS_SHOW}`;\n    const BS_CLASS_DROPDOWN_ITEM = 'dropdown-item';\n    const BS_CLASS_MENU = 'dropdown-menu';\n    const BS_SELECTOR_MENU = `.${BS_CLASS_MENU}`;\n    const BS_SELECTOR_MENU_SHOWN = `${BS_SELECTOR_MENU}.${BS_CLASS_SHOW}`;\n    const BS_CLASS_NAVBAR = 'navbar';\n    const BS_SELECTOR_NAVBAR = `.${BS_CLASS_NAVBAR}`;\n    const BS_CLASS_MENU_END = `${BS_CLASS_MENU}-end`;\n    const BS_SELECTOR_MENU_END = `${BS_SELECTOR_MENU}.${BS_CLASS_MENU_END}`;\n    const BS_SELECTOR_NAVBAR_NAV = '.navbar-nav';\n    const BS_SELECTOR_VISIBLE_ITEMS = `.dropdown-menu .${BS_CLASS_DROPDOWN_ITEM}:not(.disabled):not(:disabled)`;\n    const P3_SELECTOR_VISIBLE_ITEMS = `.${BS_CLASS_DROPDOWN_ITEM}:not(.disabled):not(:disabled)`;\n\n    // dropdown-menu-(sm|md|lg)-end\n    const menuEndRegex = new RegExp(`${BS_CLASS_MENU}(?:-[a-z]{2,3})?-end`);\n\n    const isRTL = document.documentElement.dir === 'rtl';\n    const isTouchDevice = 'ontouchstart' in window;\n\n    const BsDropdown = bootstrap.Dropdown;\n\n\n    /**\n     * Get the html document width\n     *\n     * @return {Number}\n     */\n    function getClientWidth() {\n        return Math.max(window.innerWidth, document.documentElement.clientWidth);\n    }\n\n    /**\n     * Get an Array of siblings of an HTMLElement\n     *\n     * @param {HTMLElement} element\n     * @param {string} selector\n     * @return {Array}\n     */\n    function getSiblings(element, selector = '*') {\n\n        const siblings = [];\n\n        if (element instanceof HTMLElement) {\n            const parent = element.parentElement;\n            if (parent instanceof HTMLElement) {\n                parent.querySelectorAll(`:scope > ${selector}`).forEach(function(child) {\n                    if (child !== element && child instanceof HTMLElement) {\n                        siblings.push(child);\n                    }\n                });\n            }\n        }\n\n        return siblings;\n    }\n\n    /**\n     * Check if element is an enabled dropdown toggler\n     *\n     * @param {HTMLElement} toggle\n     * @return {Boolean}\n     */\n    function isEnabledToggle(toggle) {\n\n        if (toggle && toggle instanceof HTMLElement) {\n            return (\n                toggle.getAttribute('data-bs-toggle') === 'dropdown'\n                && !toggle.disabled\n                && !toggle.classList.contains('disabled')\n            );\n        }\n\n        return false;\n    }\n\n    /**\n     * Helper function for BS_EVENT_SHOWN event handlers\n     *\n     * @param {Event} e\n     * @param {Number} breakpoint\n     * @param {Boolean} closeOthers\n     * @param {Boolean} stopPropagation\n     * @return {undefined}\n     */\n    function handleShownEvent(e, breakpoint, closeOthers, stopPropagation = false) {\n\n        const target = e.relatedTarget || e.target;\n\n        if (!isEnabledToggle(target)) {\n            return;\n        }\n\n        // If toggler is matched prevent bubbling up?\n        if (stopPropagation) {\n            e.stopPropagation();\n        }\n\n        const dropdown = target.closest(BS_SELECTOR_DROPDOWN);\n\n        if (dropdown instanceof HTMLElement) {\n            const clientWidth = getClientWidth();\n\n            dropdown.classList.add(BS_CLASS_SHOW);\n\n            setChildrenDropDirection(dropdown, clientWidth, breakpoint);\n\n            if (closeOthers || clientWidth >= breakpoint) {\n                closeOtherNavs(dropdown);\n                closeSiblingDropdowns(dropdown);\n            }\n        }\n\n        // MUST dispatch custom event (used to close external dropdowns)\n        target.dispatchEvent(new Event(P3_EVENT_SHOWN, P3_EVENT_OPTS));\n    }\n\n    /**\n     * Helper function for BS_EVENT_HIDDEN event handlers\n     *\n     * @param {Event} e\n     * @param {Boolean} stopPropagation\n     * @param {Boolean} dispatchCustomEvent Dispatch a custom event?\n     * @return {undefined}\n     */\n    function handleHiddenEvent(e, stopPropagation = false, dispatchCustomEvent = false) {\n\n        const target = e.relatedTarget || e.target;\n\n        if (!isEnabledToggle(target)) {\n            return;\n        }\n\n        // If it is a toggler prevent bubbling?\n        if (stopPropagation) {\n            e.stopPropagation();\n        }\n\n        const dropdown = target.parentElement.closest(BS_SELECTOR_DROPDOWN);\n        if (dropdown instanceof HTMLElement) {\n            dropdown.classList.remove(BS_CLASS_SHOW);\n            closeInnerDropdowns(dropdown);\n        }\n\n        // Dispatch custom event?\n        if (dispatchCustomEvent) {\n            target.dispatchEvent(new Event(P3_EVENT_HIDDEN, P3_EVENT_OPTS));\n        }\n    }\n\n    /**\n     *  Helper function for BS_EVENT_CLICK_DATA_API event handlers\n     *\n     * @param {Event} e\n     * @param {Boolean} hover\n     * @param {Number} timeout\n     * @param {Boolean} dispatchCustomEvent Dispatch a custom event?\n     * @return {undefined}\n     */\n    function handleClickDataApiEvent(e, hover, timeout, dispatchCustomEvent = false) {\n\n        const target = e.relatedTarget || e.target;\n\n        if (!isEnabledToggle(target)) {\n            return;\n        }\n\n        // If it is a toggler we MUST stop bubbling to prevent parent menu from\n        // being closed by the bootstrap handler\n        e.stopPropagation();\n\n        // Remove any running timer\n        if (hover && timeout > 0) {\n            const timeoutID = target.getAttribute(`data-${P3_DATA_TIMEOUT_ID}`);\n            if (timeoutID > 0) {\n                clearTimeout(timeoutID);\n            }\n        }\n\n        // Dispatch custom event?\n        if (dispatchCustomEvent) {\n            target.dispatchEvent(new MouseEvent(P3_EVENT_CLICK, e));\n        }\n    }\n\n    /**\n     * Close any dropdown not contained in this navbar\n     *\n     * @param {HTMLElement} navbar\n     * @return {undefined}\n     */\n    function closeExternalDropdowns(navbar) {\n\n        if (!(navbar instanceof HTMLElement)) {\n            return;\n        }\n\n        document.querySelectorAll(BS_SELECTOR_DATA_TOGGLE_SHOWN).forEach(function(toggleElement) {\n            if (!navbar.contains(toggleElement)) {\n                const toggle = BsDropdown.getOrCreateInstance(toggleElement);\n                if (toggle instanceof BsDropdown) {\n                    toggle.hide();\n                }\n            }\n        });\n    }\n\n    /**\n     * Hides all dropdowns inside the given container\n     *\n     * @param {HTMLElement|Array|NodeList} container\n     * @param {Event} event\n     * @param {boolean} [stopPropagation=true]\n     * @return {undefined}\n     */\n    function closeInnerDropdowns(container, event, stopPropagation = false) {\n\n        const containers = [];\n\n        if (container instanceof Array || container instanceof NodeList) {\n            container.forEach(function(c) {\n                if (c instanceof HTMLElement) {\n                    containers.push(c);\n                }\n            });\n        } else if (container instanceof HTMLElement) {\n            containers.push(container);\n        }\n\n        if (containers.length > 0) {\n            containers.forEach(function(container) {\n                container.querySelectorAll(BS_SELECTOR_DATA_TOGGLE_SHOWN).forEach(function(toggleElement) {\n                    const toggle = BsDropdown.getOrCreateInstance(toggleElement);\n                    if (toggle instanceof BsDropdown) {\n                        toggle.hide();\n                    }\n                });\n            });\n        }\n\n        if (event instanceof Event && stopPropagation === true) {\n            event.stopPropagation();\n        }\n    }\n\n    /**\n     * Close siblings nav menu-items\n     *\n     * @param {HTMLElement} dropdown\n     * @param {Event} event\n     * @param {Boolean} stopPropagation\n     * @return {undefined}\n     */\n    function closeSiblingDropdowns(dropdown, event, stopPropagation = false) {\n\n        getSiblings(dropdown, BS_SELECTOR_DROPDOWN).forEach(function(sibling) {\n            const toggleElement = sibling.querySelector(BS_SELECTOR_DATA_TOGGLE_SHOWN);\n            if (toggleElement) {\n                const toggle = BsDropdown.getOrCreateInstance(toggleElement);\n                if (toggle instanceof BsDropdown) {\n                    toggle.hide();\n                }\n            }\n        });\n    }\n\n    /**\n     * Close other navbar-nav in the same navbar\n     *\n     * @param {HTMLElement} dropdown\n     * @param {Event} event\n     * @param {Boolean} stopPropagation\n     * @return {undefined}\n     */\n    function closeOtherNavs(dropdown, event, stopPropagation = false) {\n\n        const otherNavs = document.querySelectorAll(`${BS_SELECTOR_NAVBAR} ${BS_SELECTOR_NAVBAR_NAV}`);\n        const currentNav = dropdown.parentElement.closest(BS_SELECTOR_NAVBAR_NAV);\n\n        otherNavs.forEach(function(otherNav) {\n            if (otherNav !== currentNav) {\n                closeInnerDropdowns(otherNav, event, stopPropagation);\n            }\n        });\n    }\n\n    /**\n     * Set the direction of a dropdown's children/submenu\n     *\n     * @param {HTMLElement} dropdown\n     * @param {Number} clientWidth\n     * @param {Number} breakpoint\n     * @return {undefined}\n     */\n    function setChildrenDropDirection(dropdown, clientWidth, breakpoint) {\n\n        const menu = dropdown.querySelector(`:scope > ${BS_SELECTOR_MENU}`);\n\n        if (!(menu instanceof HTMLElement)) {\n            return;\n        }\n\n        if (clientWidth < breakpoint) {\n            menu.querySelectorAll(BS_SELECTOR_DROPDOWN).forEach(function(child) {\n                child.classList.remove(BS_CLASS_DROPEND);\n                child.classList.remove(BS_CLASS_DROPSTART);\n            });\n            return;\n        }\n\n        const left = menu.getBoundingClientRect().left;\n        const right = left + menu.offsetWidth;\n\n        const isDropStart = dropdown.classList.contains(BS_CLASS_DROPSTART) || (\n            !dropdown.classList.contains(BS_CLASS_DROPEND)\n            && (menuEndRegex.test(menu.className))\n        );\n\n        menu.querySelectorAll(`:scope > ${BS_SELECTOR_DROPDOWN}`).forEach(function(menuItem) {\n\n            const submenu = menuItem.querySelector(`:scope > ${BS_SELECTOR_MENU}`);\n\n            if (!submenu) {\n                return;\n            }\n\n            submenu.style.visibility = 'hidden';\n            submenu.classList.add(BS_CLASS_SHOW);\n\n            const subwidth = submenu.offsetWidth;\n\n            submenu.classList.remove(BS_CLASS_SHOW);\n            submenu.style.visibility = null;\n\n            const classList = menuItem.classList;\n\n            if (isRTL) {\n                if (isDropStart) {\n                    if (right + subwidth > clientWidth) {\n                        classList.remove(BS_CLASS_DROPSTART);\n                        classList.add(BS_CLASS_DROPEND);\n                    } else {\n                        classList.remove(BS_CLASS_DROPEND);\n                        classList.add(BS_CLASS_DROPSTART);\n                    }\n                } else {\n                    if (left - subwidth < 0) {\n                        classList.remove(BS_CLASS_DROPEND);\n                        classList.add(BS_CLASS_DROPSTART);\n                    } else {\n                        classList.remove(BS_CLASS_DROPSTART);\n                        classList.add(BS_CLASS_DROPEND);\n                    }\n                }\n            } else {\n                if (isDropStart) {\n                    if (left - subwidth < 0) {\n                        classList.remove(BS_CLASS_DROPSTART);\n                        classList.add(BS_CLASS_DROPEND);\n                    } else {\n                        classList.remove(BS_CLASS_DROPEND);\n                        classList.add(BS_CLASS_DROPSTART);\n                    }\n                } else {\n                    if (right + subwidth > clientWidth) {\n                        classList.remove(BS_CLASS_DROPEND);\n                        classList.add(BS_CLASS_DROPSTART);\n                    } else {\n                        classList.remove(BS_CLASS_DROPSTART);\n                        classList.add(BS_CLASS_DROPEND);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * CLOSE MENUS AND REMOVE DROP-CLASSES ON OPT.breakpoint CROSSING\n     *\n     * @param {HTMLElement} navbar\n     * @param {Number} breakpoint\n     * @param {Number|undefined} previousWidth\n     * @return {undefined}\n     */\n    function handleBreakpointCrossing(navbar, breakpoint, previousWidth) {\n\n        const currentWidth = getClientWidth();\n\n        if (previousWidth < breakpoint && currentWidth >= breakpoint) {\n            closeInnerDropdowns(navbar);\n        } else if (previousWidth >= breakpoint && currentWidth < breakpoint) {\n            closeInnerDropdowns(navbar);\n            navbar.querySelectorAll(`.${BS_CLASS_DROPEND}, .${BS_CLASS_DROPEND}`).forEach(function(menuItem) {\n                menuItem.classList.remove(BS_CLASS_DROPSTART);\n                menuItem.classList.remove(BS_CLASS_DROPEND);\n            });\n        }\n\n        return currentWidth;\n    }\n\n    /**\n     * Move to next/previous element in a list or cycle through it\n     *\n     * @param {Array} list\n     * @param {HTMLElement} element\n     * @param {Boolean} shouldGetNext\n     * @param {Boolean} cycle\n     * @return {HTMLElement}\n     */\n    function getNextElement(list, element, shouldGetNext, cycle) {\n\n        const listLength = list.length;\n        let index = list.indexOf(element);\n\n        if (index === -1) {\n            return list[0];\n        }\n\n        index += shouldGetNext ? 1 : -1;\n\n        if (cycle) {\n            index = (index + listLength) % listLength;\n        }\n\n        return list[Math.max(0, Math.min(index, listLength - 1))];\n    }\n\n    /**\n     * Handler function for ENTER | UP | DOWN keypress\n     *\n     * This is used inside a capturing handler\n     *\n     * @param {Event} e\n     * @param {HTMLElement} navbar\n     * @param {Boolean} dispatchCustomEvent Dispatch a custom event?\n     * @return {undefined}\n     */\n    function handleKeydown(e, navbar, dispatchCustomEvent) {\n\n        // Let bootstrap handlers deal with ESCAPE and TAB\n        if (!e.key || e.key === ESCAPE_KEY || e.key === TAB_KEY) {\n            return;\n        }\n\n        // ENTER | UP | DOWN keypress are handled\n        const isValidKeyEvent = [ENTER_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY].includes(e.key);\n        if (!isValidKeyEvent) {\n            return;\n        }\n\n        const target = e.target;\n        // Let bootstrap dropdown handle top-level (nav-link) dropdown-items and\n        // other elements such as form inputs\n        if (!target || !target.classList.contains(BS_CLASS_DROPDOWN_ITEM)) {\n            return;\n        }\n\n        // DO NOT HANDLE events for targets outside our navbar\n        if (navbar instanceof HTMLElement && !navbar.contains(target)) {\n            return;\n        }\n\n        // STOP DOWNWARD propagation from here\n        e.stopPropagation();\n\n        if (e.key === ENTER_KEY) {\n            if (target.matches(BS_SELECTOR_DATA_TOGGLE)) {\n                // Only prevent default behaviour on dropdown togglers\n                e.preventDefault();\n                target.click();\n                // Apply focus on 1st submenu item if any\n                const subItem = target.parentElement.querySelector(`:scope ${BS_SELECTOR_VISIBLE_ITEMS}`);\n                if (subItem) {\n                    subItem.focus();\n                }\n            }\n        } else {\n            const menu = target.closest(BS_SELECTOR_MENU);\n            if (menu instanceof HTMLElement) {\n                const items = [].concat(\n                    ...menu.querySelectorAll(`:scope > li > ${P3_SELECTOR_VISIBLE_ITEMS}`)\n                );\n\n                const isNavKeyEvent = e.key === ARROW_DOWN_KEY || e.key === ARROW_UP_KEY;\n                if (isNavKeyEvent) {\n                    const nextItem = getNextElement(items, target, e.key !== ARROW_UP_KEY, true);\n                    if (nextItem) {\n                        nextItem.focus();\n                        closeSiblingDropdowns(nextItem.parentElement);\n                    }\n                }\n            }\n        }\n\n        // Dispatch custom event?\n        if (dispatchCustomEvent) {\n            target.dispatchEvent(new KeyboardEvent(P3_EVENT_KEYDOWN, e));\n        }\n    }\n\n    /**\n     * SHOW/HIDE ON HOVER\n     *\n     * @param {HTMLElement} navbar\n     * @param {Number} breakpoint\n     * @param {Number} timeout\n     * @return {undefined}\n     */\n    function activateHover(navbar, breakpoint, timeout) {\n\n        const dropdowns = navbar.querySelectorAll(BS_SELECTOR_DROPDOWN);\n\n        dropdowns.forEach(function(menuItem) {\n            menuItem.addEventListener('mouseenter', function(e) {\n                handleMouseEnter(menuItem, breakpoint, timeout);\n            });\n            menuItem.addEventListener('mouseleave', function(e) {\n                handleMouseLeave(menuItem, breakpoint, timeout);\n            });\n        });\n    }\n\n    /**\n     * Helper method for mouseenter event handler\n     *\n     * @param {HTMLElement} menuItem\n     * @param {Number} breakpoint\n     * @param {Number} timeout\n     * @return {undefined}\n     */\n    function handleMouseEnter(menuItem, breakpoint, timeout) {\n\n        if (getClientWidth() < breakpoint) {\n            return;\n        }\n\n        const toggleElement = menuItem.querySelector(BS_SELECTOR_DATA_TOGGLE);\n\n        if (toggleElement instanceof HTMLElement) {\n            if (timeout > 0) {\n                // Clear the previously registered timeout, if any\n                const timeoutID = toggleElement.getAttribute(`data-${P3_DATA_TIMEOUT_ID}`);\n                if (timeoutID > 0) {\n                    clearTimeout(timeoutID);\n                }\n            }\n            if (!toggleElement.classList.contains(BS_CLASS_SHOW)) {\n                const toggle = BsDropdown.getOrCreateInstance(toggleElement);\n                if (toggle instanceof BsDropdown) {\n                    toggle.show();\n                }\n            }\n        }\n    }\n\n    /**\n     * Helper method for mouseleave event handler\n     *\n     * @param {HTMLElement} menuItem\n     * @param {Number} breakpoint\n     * @param {Number} timeout\n     * @return {undefined}\n     */\n    function handleMouseLeave(menuItem, breakpoint, timeout) {\n\n        if (getClientWidth() < breakpoint) {\n            return;\n        }\n\n        const toggleElement = menuItem.querySelector(BS_SELECTOR_DATA_TOGGLE);\n\n        if (toggleElement instanceof HTMLElement) {\n            // Clear the previously registered timeout, if any\n            if (toggleElement.classList.contains(BS_CLASS_SHOW) && timeout > 0) {\n                const timeoutID = toggleElement.getAttribute(`data-${P3_DATA_TIMEOUT_ID}`);\n                if (timeoutID > 0) {\n                    clearTimeout(timeoutID);\n                }\n            }\n            // Add a timeout for delaying hide events so that the mouse leaving\n            // the control will not immediatly close the submenu\n            toggleElement.setAttribute(`data-${P3_DATA_TIMEOUT_ID}`, setTimeout(\n                function() {\n                    if (toggleElement.classList.contains(BS_CLASS_SHOW)) {\n                        const toggle = BsDropdown.getOrCreateInstance(toggleElement);\n                        if (toggle instanceof BsDropdown) {\n                            toggle.hide();\n                        }\n                    }\n                },\n                timeout\n            ));\n        }\n    }\n\n    /**\n     * Determine navbar expand breakpoint form expand-(sm|md|lg|xl) class if present\n     *\n     * @param {HTMLElement} navbar\n     * @return {integer|null}\n     */\n    function getExpandBreakpoint(navbar) {\n        for (const nc of navbar.classList) {\n            const rootStyle = window.getComputedStyle(document.documentElement);\n            const breakpoint = parseInt(rootStyle.getPropertyValue(`--p3-bs-${nc}`));\n            if (Number.isInteger(breakpoint)) {\n                return breakpoint;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * p3bsNavbar main function\n     *\n     * @param {string} selector A valid string selector, an HTMLElement, an\n     *      Array of elements or a NodeList\n     * @param {Object} options\n     * @return {undefined}\n     */\n    const p3bsNavbar = function(selector, options) {\n\n        const OPTIONS = Object.assign({}, p3bsNavbar.defaults, options);\n\n        let navbars = [];\n\n        if (typeof(selector) === 'string') {\n            navbars = document.querySelectorAll(selector);\n        } else if (selector instanceof HTMLElement) {\n            navbars = [selector];\n        } else if (selector instanceof Array || selector instanceof NodeList) {\n            selector.forEach(function(element) {\n                if (element instanceof HTMLElement) {\n                    navbars.push(element);\n                }\n            });\n        }\n\n        navbars.forEach(function(navbar) {\n            // Make a copy to preserve the original OPTIONS object\n            const OPT = Object.assign({}, OPTIONS);\n\n            // Determine navbar expand breakpoint\n            const breakpoint = getExpandBreakpoint(navbar);\n            if (breakpoint > 0) {\n                OPT.breakpoint = breakpoint;\n            }\n\n            if (OPT.customEvents) {\n                // Dispatch custom event on BS_EVENT_SHOW\n                navbar.addEventListener(BS_EVENT_SHOW, function(e) {\n                    const target = e.relatedTarget || e.target;\n                    target.dispatchEvent(new Event(P3_EVENT_SHOW, P3_EVENT_OPTS));\n                });\n\n                // Dispatch custom event on BS_EVENT_HIDE\n                navbar.addEventListener(BS_EVENT_HIDE, function(e) {\n                    const target = e.relatedTarget || e.target;\n                    target.dispatchEvent(new Event(P3_EVENT_HIDE, P3_EVENT_OPTS));\n                });\n            }\n\n            // handle BS_EVENT_SHOWN events\n            navbar.addEventListener(BS_EVENT_SHOWN, function(e) {\n                handleShownEvent(e, OPT.breakpoint, OPT.closeOthers, OPT.stopPropagation);\n            });\n\n            // handle BS_EVENT_HIDDEN events\n            navbar.addEventListener(BS_EVENT_HIDDEN, function(e) {\n                handleHiddenEvent(e, OPT.stopPropagation, OPT.customEvents);\n            });\n\n            // handle CLICK events (BS_EVENT_CLICK_DATA_API not used)\n            navbar.addEventListener('click', function(e) {\n                handleClickDataApiEvent(e, OPT.hover, OPT.timeout, OPT.customEvents);\n            });\n\n            // handle KEYDOWN events (BS_EVENT_KEYDOWN_DATA_API not used)\n            document.addEventListener('keydown', function(e) {\n                handleKeydown(e, navbar, OPT.customEvents);\n            }, true); // CAPTURE events before document where bs listeners are registered\n\n            // Close menus on OPT.breakpoint crossing\n            let previousWidth = getClientWidth();\n            window.addEventListener('resize', function(e) {\n                previousWidth = handleBreakpointCrossing(navbar, breakpoint, previousWidth);\n            });\n\n            // Activate hover dropdown\n            if (OPT.hover && !isTouchDevice) {\n                activateHover(navbar, OPT.breakpoint, OPT.timeout);\n            }\n\n            // Close external dropdowns on showing navbar dropdowns\n            navbar.addEventListener(P3_EVENT_SHOWN, function(e) {\n                closeExternalDropdowns(navbar);\n                if (OPT.stopPropagation) {\n                    e.stopPropagation(); // No need to propagate outside the navbar\n                }\n            });\n        });\n    };\n\n    p3bsNavbar.defaults = {\n        breakpoint: 768,\n        hover: false,\n        timeout: 250,\n        closeOthers: false,\n        stopPropagation: false,\n        customEvents: false,\n    };\n\n    // Define the vendor namespace and library namespace and if not already set\n    window.pine3ree = window.pine3ree || {};\n    window.pine3ree.bs = window.pine3ree.bs || {};\n\n    // Assign the main function to the right namespace\n    window.pine3ree.bs.navbar = p3bsNavbar;\n    // Assign the main function to the window object using the same name for the\n    // jQuery plugin\n    window.p3bsNavbar = p3bsNavbar;\n\n    // Add jQuery plugin if jQuery is loaded\n    if (typeof($) === 'function' && $().fn === $.jquery) {\n        $.fn.p3bsNavbar = function(options) {\n            const opts = $.extend($.fn.p3bsNavbar.defaults, options);\n            p3bsNavbar(this.get(), opts);\n        };\n\n        $.fn.p3bsNavbar.defaults = p3bsNavbar.defaults;\n    }\n})(window.bootstrap, window.jQuery);\n"]}